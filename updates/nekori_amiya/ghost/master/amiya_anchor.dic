//---------------------------Anchors and OnTranslate--------------------------

//This .dic file is for setting up anchor words, which are links to set conversations attached to certain words automatically. It also deals with OnTranslate, which is a fairly unique function. All text goes through OnTranslate first before it displays on your ghost, which is how it knows to turn certain words into links. Before you try it yourself, I've already tried adding automatic \w8 pauses after periods and that totally breaks everything.
//Why should I care about anchor words, you ask? Or what can I use them for? Well, you can set up anchor words to easy explanations for things your ghost might talk about that might confuse your user. People they know, places they've been, pop culture references the user might not get, information about you the creator or the world the characters from, items in an item menu, basically any number of things. Anchor words can be a handy repository of information! Or just an easy way to set up some cheap jokes. The power is yours!

//Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//This file is very short, so don't worry! And if you aren't planning on using anchor words, you just have to delete a few things and you'll be done!


//--OnTranslate

//As I said above, OnTranslate filters through all the text your ghost displays and does whatever you specify to it. This is a powerful function that can be used in a lot of creative ways I bet, but I wouldn't mess with it too much since you can pretty easily break stuff.
//If you're not interested in any anchor words, delete all the lines that start with _talk = REPLACE under OnTranslate.

OnTranslate
{
	_talk = reference0
 	_talk = REPLACE(_talk, "Anchor 1", "\_a[anchor1]Anchor 1\_a")
 	_talk = REPLACE(_talk, "Anchor 2", "\_a[anchor2]Anchor 2\_a")
 	_talk = REPLACE(_talk, "Anchor 3", "\_a[anchor3]Anchor 3\_a")
	_talk = TextOnlyTranslator(_talk,'TextOnlyTranslatorFunc')
	//_talk = "\_?" + _talk //debug
	/*_talk = REPLACE(_talk, ", ", ", \w1")
	_talk = REPLACE(_talk, ". ", ". \w6")
	_talk = REPLACE(_talk, "? ", "? \w6")
	_talk = REPLACE(_talk, "! ", "! \w6")
	_talk = REPLACE(_talk, "... ", "... \w8")*/
	
	if reference1 == "" && reference2 == "" { //send input box : no event (ref2) , no special flag (ref1)
		EVAL('"' + REPLACE(_talk,'"','" + CHR(0x22) + "') + '"')
    }
    else { //event result from ghost
		TOSTR(_talk)
    }
}

TextOnlyTranslator
{
    _string = RE_SPLIT(_argv[0],'\\(\\|q\[.*?\]\[.*?\]|[!&8cfijmpqsn]\[.*?\]|[-*+014567bcehntuvxz]|_[ablmsuvw]\[.*?\]|__(t|[qw]\[.*?\])|_[!?+nqsV]|[sipw][0-9])')
    _n = ARRAYSIZE(_string)
    _tag = RE_GETSTR()
    _tr = ''
    _qs = 0

    for _i = 0 ; _i < _n ; _i++ {

        _tr += EVAL("%(_argv[1])(_string[_i],_qs)")
        _tr += _tag[_i]
        if '\_q' _in_ _tag[_i] {
            _qs = ! _qs
        }
        
        if !_qs {
                //needs to check negative lookbehind \w tags to not double insert?
                //adds pauses to \n\n and \n\n[half]
            _tr = RE_REPLACE(_tr , '(?<!(\\w[0-9]))\\n\\n(?!\[)', '\n\n')
            _tr = RE_REPLACE(_tr , '(?<!(\\w[0-9]))\\n\\n\[half\]' , '\n\n[half]')
        }
    }
    
    _tr
}

TextOnlyTranslatorFunc
{
    //_argv[0] = text to parse
    //_argv[1] = if it's a quicksection
    
    _text = _argv[0]
    if ! _argv[1] {
            //add pauses to sentence markers
        _text = RE_REPLACE(_text , '\.\.\.(?=\s)', '...\w8')
        _text = RE_REPLACE(_text , ',(?=\s)', ',\w1')
        _text = RE_REPLACE(_text , '\.(?=\s)', '.\w6')
        _text = RE_REPLACE(_text , '\?(?=\s)', '?\w6')
        _text = RE_REPLACE(_text ,'!(?=[^!])', '!\w6')
    }

    _text
}
	
//--OnAnchorSelect
//OnAnchorSelect runs whenever someone clicks one of the links as specified above, or a link that begins with http://.

OnAnchorSelect
{
	if "http://" _in_ reference0 //checking to see if the link is a web address
	{
		"\j[%(reference0)]\e" // \j is a tag that will open a specified url in the user's browser of choice. This basically just tells the ghost to open the webpage stored in reference0, which would be the address that the user just clicked. I didn't get too much into \j in the walkthrough page because I have literally never used it except here.
	}
	else //if it's NOT a web address
	{
		case reference0 //case is a unique thing I've only really seen here in anchor.dic, and as far as I can tell it sets up reference0 for evaluation to see if matches any of the below criteria, which are all tagged with when. I wouldn't mess with much of this stuff unless you have a better grasp of this kind of thing than I do, haha. You can add as many things here as you want to set up above as long as you follow the basic format.
		{
			when "anchor1" //if the link is this value
			{
				"\0\s[0]This dialogue is for when Anchor 1 is clicked.\e"
			}
			when "anchor2" //if the link is this value
			{
				"\0\s[0]This dialogue is for when Anchor 2 is clicked.\e"
			}
			when "anchor3" //if the link is this value
			{
				"\0\s[0]This dialogue is for when Anchor 3 is clicked.\e"
			}
		}
	}
}